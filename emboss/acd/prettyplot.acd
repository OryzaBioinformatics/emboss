appl: prettyplot [
	doc: "Displays aligned sequences, with colouring and boxing"
	groups: "display: alignment: multiple"
]

	seqset: msf [ 
	param: Y
	type: gapany
	info: "Sequences file to be read in"
	help: "File containing a sequence alignment"
	]
	
	int: residuesperline [
	optional: Y 
	def: 50
	info: "Number of residues to be displayed on each line" 
	help: "The number of residues to be displayed on each line"
	]	

	int:	resbreak [
	optional: Y 
	min: 1
	max: $(residuesperline)
	info: "Residues before a space"
	def: $(residuesperline) 
        expect: "Same as -residuesperline to give no breaks"
	]

	bool: ccolours [ 
	optional: Y
	def : Y
	info: "Colour residues by their consensus value."
	]

	string: cidentity [ 
	optional: Y 
	info: "Colour to display identical residues (RED)"
	def : "RED"
	]
	string: csimilarity [ 
	optional: Y 
	info: "Colour to display similar residues (GREEN)"
	def : "GREEN"
	]
	string: cother [ 
	optional: Y 
	info: "Colour to display other residues (BLACK)"
	def : "BLACK"
	]

	bool: docolour [ 
	optional: Y 
	info: "Colour residues by table oily, amide etc."
	def : N
	]

	bool: title [
	optional: Y 
	info: "Do not display the title"
	def : Y
	]

	string: shade [
	optional: Y
	info: "shading" 
	help: "Set to BPLW for normal shading \
               so for pair = 1.5,1.0,0.5 and shade = BPLW \
               Residues score Colour  \
               1.5 or over....... BLACK (B) \
               1.0 to 1.5 ....... BROWN (P) \
               0.5 to 1.0 ....... WHEAT (L) \
               under  0.5 ....... WHITE (W) \
              The only four letters allowed are BPLW, in any order."
	def : ""
	]

	string: pair [
	optional: Y 
	info: "Values to represent identical similar related"
	def : "1.5,1.0,0.5"
	]

	int: identity [
	optional: Y 
	info: "Only match those which are identical in all sequences."
	def : 0
	min : 0
	]

	bool: box [
	optional: Y 
	info: "Display prettyboxes"
	def: Y
	]

        bool: boxcol [
        optional: Y 
        info: "Colour the background in the boxes"
        def: N
        ]

        string: boxcolval [
        optional: Y 
        info: "Colour to be used for background. (GREY)"
        def: "GREY"
        ]

	bool: consensus [
	optional: Y 
	info: "Display the consensus"
	def: N
	]

	bool: name [
	optional: Y 
	info: "Display the sequence names"
	def: Y
	]

	int: maxnamelen [
	optional: Y 
	info: "Margin size for the sequence name."
	def: 10
	]

	bool: number [
	optional: Y 
	info: "Display the residue number"
	def: Y
	]

	bool: listoptions [
	optional: Y
	info: "Display the date and options used"
	def: Y
	] 

	float:  plurality [
	optional: Y 
	info: "Plurality check value (totweight/2)"
	def: "@( $(msf.totweight) / 2)"
        expect: "Half the total sequence weighting"
	]	

	bool: collision [
	optional: Y
	info: "Allow collisions in calculating consensus"
	def: Y
	]

	int: alternative [
	optional: Y
	info: "Use alternative collisions routine"
	help: "Use alternative collisions routine \
              0) Normal collision check. (default) \

              1) checks identical scores with the max score
              found. So if any other residue matches the
              identical score then a collision has occurred. \

              2) If another residue has a greater than or equal to
              matching score and these do not match then a
              collision has occurred. \
                      
              3) Checks all those not in the current
              consensus.If any of these give a top score for
              matching or identical scores then a collision
              has occured."
	def: 0
	min: 0
	max: 3
	]

	bool: portrait [
	optional: Y
	info: "Set page to Portrait"
	def: N
	]

	matrix: datafile [
	optional: Y
	info: "Matrix file"
	protein: "$(msf.protein)"
	]

	int: showscore [
	optional: Y
	info: "Print residue scores"
	def: -1
	]

	graph: graph [
	req: y
	]
