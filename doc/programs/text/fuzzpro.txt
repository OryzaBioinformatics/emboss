
                              EMBOSS: fuzzpro
     _________________________________________________________________
   
                                Program fuzzpro
                                       
Function

   Protein pattern search
   
Description

   fuzzpro uses PROSITE style patterns to search protein sequences.
   
   Patterns are specifications of a (typically short) length of sequence
   to be found. They can specify a search for an exact sequence or they
   can allow various ambiguities, matches to variable lengths of sequence
   and repeated subsections of the sequence.
   
   fuzzpro intelligently selects the optimum searching algorithm to use,
   depending on the complexity of the search pattern specified.
   
Usage

   Here is a sample session with fuzzpro.

% fuzzpro
Input sequence: sw:*
Search pattern: [FY]-[LIV]-G-[DE]-E-A-Q-x-[RKQ](2)-G
Number of mismatches [0]:
Output file [5h1d_fugru.fuzzpro]:

Command line arguments

   Mandatory qualifiers:
  [-sequence]          seqall     Sequence database USA
   -pattern            string     The standard IUPAC one-letter codes for the
                                  amino acids are used.
                                  The symbol `x' is used for a position where
                                  any amino acid is accepted.
                                  Ambiguities are indicated by listing the
                                  acceptable amino acids for a given position,
                                  between square parentheses `[ ]'. For
                                  example: [ALT] stands for Ala or Leu or Thr.
                                  Ambiguities are also indicated by listing
                                  between a pair of curly brackets `{ }' the
                                  amino acids that are not accepted at a given
                                  position. For example: {AM} stands for any
                                  amino acid except Ala and Met.
                                  Each element in a pattern is separated from
                                  its neighbor by a `-'. (Optional in
                                  fuzzpro).
                                  Repetition of an element of the pattern can
                                  be indicated by following that element with
                                  a numerical value or a numerical range
                                  between parenthesis. Examples: x(3)
                                  corresponds to x-x-x, x(2,4) corresponds to
                                  x-x or x-x-x or x-x-x-x.
                                  When a pattern is restricted to either the
                                  N- or C-terminal of a sequence, that pattern
                                  either starts with a `<' symbol or
                                  respectively ends with a `>' symbol.
                                  A period ends the pattern. (Optional in
                                  fuzzpro).
                                  For example, [DE](2)HS{P}X(2)PX(2,4)C
   -mismatch           integer    Number of mismatches
  [-outfile]           report     (no help text) report value

   Optional qualifiers: (none)
   Advanced qualifiers: (none)
   General qualifiers:
  -help                bool       report command line options. More
                                  information on associated and general
                                  qualifiers can be found with -help -verbose
   

   Mandatory qualifiers Allowed values Default
   [-sequence]
   (Parameter 1) Sequence database USA Readable sequence(s) Required
   -pattern The standard IUPAC one-letter codes for the amino acids are
   used. The symbol `x' is used for a position where any amino acid is
   accepted. Ambiguities are indicated by listing the acceptable amino
   acids for a given position, between square parentheses `[ ]'. For
   example: [ALT] stands for Ala or Leu or Thr. Ambiguities are also
   indicated by listing between a pair of curly brackets `{ }' the amino
   acids that are not accepted at a given position. For example: {AM}
   stands for any amino acid except Ala and Met. Each element in a
   pattern is separated from its neighbor by a `-'. (Optional in
   fuzzpro). Repetition of an element of the pattern can be indicated by
   following that element with a numerical value or a numerical range
   between parenthesis. Examples: x(3) corresponds to x-x-x, x(2,4)
   corresponds to x-x or x-x-x or x-x-x-x. When a pattern is restricted
   to either the N- or C-terminal of a sequence, that pattern either
   starts with a `<' symbol or respectively ends with a `>' symbol. A
   period ends the pattern. (Optional in fuzzpro). For example,
   [DE](2)HS{P}X(2)PX(2,4)C Any string is accepted An empty string is
   accepted
   -mismatch Number of mismatches Integer 0 or more 0
   [-outfile]
   (Parameter 2) (no help text) report value Report file
   Optional qualifiers Allowed values Default
   (none)
   Advanced qualifiers Allowed values Default
   (none)
   
Input file format

   Patterns for fuzzpro are based on the format of pattern used in the
   PROSITE database, with the difference that the terminating dot '.' and
   the hyphens, '-', between the characters are optional.
   
   The PROSITE pattern definition from the PROSITE documentation follows.
   
     * The standard IUPAC one-letter codes for the amino acids are used.
     * The symbol `x' is used for a position where any amino acid is
       accepted.
     * Ambiguities are indicated by listing the acceptable amino acids
       for a given position, between square parentheses `[ ]'. For
       example: [ALT] stands for Ala or Leu or Thr.
     * Ambiguities are also indicated by listing between a pair of curly
       brackets `{ }' the amino acids that are not accepted at a given
       position. For example: {AM} stands for any amino acid except Ala
       and Met.
     * Each element in a pattern is separated from its neighbor by a `-'.
       (Optional in fuzzpro).
     * Repetition of an element of the pattern can be indicated by
       following that element with a numerical value or a numerical range
       between parenthesis. Examples: x(3) corresponds to x-x-x, x(2,4)
       corresponds to x-x or x-x-x or x-x-x-x.
     * When a pattern is restricted to either the N- or C-terminal of a
       sequence, that pattern either starts with a `<' symbol or
       respectively ends with a `>' symbol.
     * A period ends the pattern. (Optional in fuzzpro).
       
   For example, in SWISSPROT entry 100K_RAT you can look for the pattern:
[DE](2)HS{P}X(2)PX(2,4)C

   This means: Two Asps or Glus in any order followed by His, Ser, any
   residue other then Pro, then two of any residue followed by Pro
   followed by two to four of any residue followed by Cys.
   
   The search is case-independent, so 'AAA' matches 'aaa'.
   
Output file format

   The output is a standard EMBOSS report file.
   
   The results can be output in one of several styles by using the
   command-line qualifier -rformat xxx, where 'xxx' is replaced by the
   name of the required format. The available format names are: embl,
   genbank, gff, pir, swiss, trace, listfile, dbmotif, diffseq, excel,
   feattable, motif, regions, seqtable, simple, srs, table, tagseq
   
   See:
   http://www.uk.embnet.org/Software/EMBOSS/Themes/ReportFormats.html for
   further information on report formats.
   
   By default fuzzzpro writes a 'seqtable' report file.
   
   The output from the above example is:
   
########################################
# Program: fuzzpro
# Rundate: Thu Apr 11 13:38:06 2002
# Report_file: 100k_rat.fuzzpro
########################################

#=======================================
#
# Sequence: ACT1_ABSGL     from: 1   to: 140
# HitCount: 1
#
# Pattern: [FY]-[LIV]-G-[DE]-E-A-Q-x-[RKQ](2)-G
# Mismatch: 0
#
#=======================================

  Start     End Mismatch Sequence
     55      65        . YVGDEAQSKRG

#---------------------------------------
#---------------------------------------
#=======================================
#
# Sequence: ACT1_ACACA     from: 1   to: 375
# HitCount: 1
#
# Pattern: [FY]-[LIV]-G-[DE]-E-A-Q-x-[RKQ](2)-G
# Mismatch: 0
#
#=======================================

  Start     End Mismatch Sequence
     53      63        . YVGDEAQSKRG

#---------------------------------------
#---------------------------------------
#=======================================
#
# Sequence: ACT1_ARATH     from: 1   to: 377
# HitCount: 1
#
# Pattern: [FY]-[LIV]-G-[DE]-E-A-Q-x-[RKQ](2)-G
# Mismatch: 0
#
#=======================================

  Start     End Mismatch Sequence
     55      65        . YVGDEAQSKRG

#---------------------------------------
#---------------------------------------

etc.

Data files

   None.
   
Notes

   None.
   
References

   None.
   
Warnings

   None.
   
Diagnostic Error Messages

   None.
   
Exit status

   It always exits with a status of 0.
   
Known bugs

   None.
   
See also

    Program name                        Description
   antigenic      Finds antigenic sites in proteins
   digest         Protein proteolytic enzyme or reagent cleavage digest
   fuzztran       Protein pattern search after translation
   helixturnhelix Report nucleic acid binding motifs
   oddcomp        Finds protein sequence regions with a biased composition
   patmatdb       Search a protein sequence with a motif
   patmatmotifs   Search a PROSITE motif database with a protein sequence
   pepcoil        Predicts coiled coil regions
   preg           Regular expression search of a protein sequence
   pscan          Scans proteins using PRINTS
   sigcleave      Reports protein signal cleavage sites
   
     * fuzznuc - Nucleic acid pattern search
     * fuzztran - Protein pattern search after translation
       
   Other EMBOSS programs allow you to search for regular expression
   patterns but may be less easy for the user who has never used regular
   expressions before:
   
     * dreg - Regular expression search of a nucleotide sequence
     * preg - Regular expression search of a protein sequence
       
Author(s)

   This application was written by Alan Bleasby (ableasby@hgmp.mrc.ac.uk)
   
History

   Written (2000) - Alan Bleasby
   '-usa' added (13 March 2001) - Gary Williams
   
Target users

   This program is intended to be used by everyone and everything, from
   naive users to embedded scripts.
   
Comments
