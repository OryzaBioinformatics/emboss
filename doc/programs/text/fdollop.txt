
                                  fdollop 



Function

   Dollo and polymorphism parsimony algorithm

Description

   Estimates phylogenies by the Dollo or polymorphism parsimony criteria
   for discrete character data with two states (0 and 1). Also
   reconstructs ancestral states and allows weighting of characters.
   Dollo parsimony is particularly appropriate for restriction sites
   data; with ancestor states specified as unknown it may be appropriate
   for restriction fragments data.

Algorithm

   This program carries out the Dollo and polymorphism parsimony methods.
   The Dollo parsimony method was first suggested in print in verbal form
   by Le Quesne (1974) and was first well-specified by Farris (1977). The
   method is named after Louis Dollo since he was one of the first to
   assert that in evolution it is harder to gain a complex feature than
   to lose it. The algorithm explains the presence of the state 1 by
   allowing up to one forward change 0-->1 and as many reversions 1-->0
   as are necessary to explain the pattern of states seen. The program
   attempts to minimize the number of 1-->0 reversions necessary. The
   assumptions of this method are in effect:
    1. We know which state is the ancestral one (state 0).
    2. The characters are evolving independently.
    3. Different lineages evolve independently.
    4. The probability of a forward change (0-->1) is small over the
       evolutionary times involved.
    5. The probability of a reversion (1-->0) is also small, but still
       far larger than the probability of a forward change, so that many
       reversions are easier to envisage than even one extra forward
       change.
    6. Retention of polymorphism for both states (0 and 1) is highly
       improbable.
    7. The lengths of the segments of the true tree are not so unequal
       that two changes in a long segment are as probable as one in a
       short segment.

   One problem can arise when using additive binary recoding to represent
   a multistate character as a series of two-state characters. Unlike the
   Camin-Sokal, Wagner, and Polymorphism methods, the Dollo method can
   reconstruct ancestral states which do not exist. An example is given
   in my 1979 paper. It will be necessary to check the output to make
   sure that this has not occurred.

   The polymorphism parsimony method was first used by me, and the
   results published (without a clear specification of the method) by
   Inger (1967). The method was independently published by Farris (1978a)
   and by me (1979). The method assumes that we can explain the pattern
   of states by no more than one origination (0-->1) of state 1, followed
   by retention of polymorphism along as many segments of the tree as are
   necessary, followed by loss of state 0 or of state 1 where necessary.
   The program tries to minimize the total number of polymorphic
   characters, where each polymorphism is counted once for each segment
   of the tree in which it is retained.

   The assumptions of the polymorphism parsimony method are in effect:
    1. The ancestral state (state 0) is known in each character.
    2. The characters are evolving independently of each other.
    3. Different lineages are evolving independently.
    4. Forward change (0-->1) is highly improbable over the length of
       time involved in the evolution of the group.
    5. Retention of polymorphism is also improbable, but far more
       probable that forward change, so that we can more easily envisage
       much polymorhism than even one additional forward change.
    6. Once state 1 is reached, reoccurrence of state 0 is very
       improbable, much less probable than multiple retentions of
       polymorphism.
    7. The lengths of segments in the true tree are not so unequal that
       we can more easily envisage retention events occurring in both of
       two long segments than one retention in a short segment.

   That these are the assumptions of parsimony methods has been
   documented in a series of papers of mine: (1973a, 1978b, 1979, 1981b,
   1983b, 1988b). For an opposing view arguing that the parsimony methods
   make no substantive assumptions such as these, see the papers by
   Farris (1983) and Sober (1983a, 1983b), but also read the exchange
   between Felsenstein and Sober (1986).

Usage

   Here is a sample session with fdollop


% fdollop 
Dollo and polymorphism parsimony algorithm
Input file: dollop.dat
Input tree file: 
Output file [dollop.fdollop]: 


Dollo and polymorphism parsimony algorithm, version 3.6b

Adding species:
   1. Alpha
   2. Beta
   3. Gamma
   4. Delta
   5. Epsilon

Doing global rearrangements
  !---------!
   .........

Output written to file "dollop.fdollop"

Trees also written onto file "dollop.treefile"


   Go to the input files for this example
   Go to the output files for this example

Command line arguments

   Standard (Mandatory) qualifiers:
  [-infile]            discretestates File containing one or more data sets
  [-intreefile]        tree       (no help text) tree value
  [-outfile]           outfile    Output file name

   Additional (Optional) qualifiers (* if not always prompted):
   -weights            properties Weights file
   -ancfile            properties Ancestral states file
   -method             menu       Parsimony method
*  -njumble            integer    Number of times to randomise
*  -seed               integer    Random number seed between 1 and 32767 (must
                                  be odd)
   -threshold          float      Threshold value
   -[no]trout          toggle     Write out trees to tree file
*  -outtreefile        outfile    Tree file name
   -printdata          boolean    Print data at start of run
   -[no]progress       boolean    Print indications of progress of run
   -[no]treeprint      boolean    Print out tree
   -ancseq             boolean    Print states at all nodes of tree
   -stepbox            boolean    Print out steps in each character

   Advanced (Unprompted) qualifiers: (none)
   Associated qualifiers:

   "-outfile" associated qualifiers
   -odirectory3        string     Output directory

   "-outtreefile" associated qualifiers
   -odirectory         string     Output directory

   General qualifiers:
   -auto               boolean    Turn off prompts
   -stdout             boolean    Write standard output
   -filter             boolean    Read standard input, write standard output
   -options            boolean    Prompt for standard and additional values
   -debug              boolean    Write debug output to program.dbg
   -verbose            boolean    Report some/full command line options
   -help               boolean    Report command line options. More
                                  information on associated and general
                                  qualifiers can be found with -help -verbose
   -warning            boolean    Report warnings
   -error              boolean    Report errors
   -fatal              boolean    Report fatal errors
   -die                boolean    Report deaths


   Standard (Mandatory) qualifiers Allowed values Default
   [-infile]
   (Parameter 1) File containing one or more data sets Discrete states
   file
   [-intreefile]
   (Parameter 2) (no help text) tree value Phylogenetic tree
   [-outfile]
   (Parameter 3) Output file name Output file <sequence>.fdollop
   Additional (Optional) qualifiers Allowed values Default
   -weights Weights file Property value(s)
   -ancfile Ancestral states file Property value(s)
   -method Parsimony method
   d (Dollo)
   p (Polymorphism)
   d
   -njumble Number of times to randomise Integer 0 or more 0
   -seed Random number seed between 1 and 32767 (must be odd) Integer
   from 1 to 32767 1
   -threshold Threshold value Number 0.000 or more $(infile.discretesize)
   -[no]trout Write out trees to tree file Toggle value Yes/No Yes
   -outtreefile Tree file name Output file
   -printdata Print data at start of run Boolean value Yes/No No
   -[no]progress Print indications of progress of run Boolean value
   Yes/No Yes
   -[no]treeprint Print out tree Boolean value Yes/No Yes
   -ancseq Print states at all nodes of tree Boolean value Yes/No No
   -stepbox Print out steps in each character Boolean value Yes/No No
   Advanced (Unprompted) qualifiers Allowed values Default
   (none)

Input file format

   fdollop reads discrete character data with "?", "P", "B" states
   allowed. .

  (0,1) Discrete character data

   These programs are intended for the use of morphological systematists
   who are dealing with discrete characters, or by molecular
   evolutionists dealing with presence-absence data on restriction sites.
   One of the programs (PARS) allows multistate characters, with up to 8
   states, plus the unknown state symbol "?". For the others, the
   characters are assumed to be coded into a series of (0,1) two-state
   characters. For most of the programs there are two other states
   possible, "P", which stands for the state of Polymorphism for both
   states (0 and 1), and "?", which stands for the state of ignorance: it
   is the state "unknown", or "does not apply". The state "P" can also be
   denoted by "B", for "both".

   There is a method invented by Sokal and Sneath (1963) for linear
   sequences of character states, and fully developed for branching
   sequences of character states by Kluge and Farris (1969) for recoding
   a multistate character into a series of two-state (0,1) characters.
   Suppose we had a character with four states whose character-state tree
   had the rooted form:

               1 ---> 0 ---> 2
                      |
                      |
                      V
                      3

   so that 1 is the ancestral state and 0, 2 and 3 derived states. We can
   represent this as three two-state characters:

                Old State           New States
                --- -----           --- ------
                    0                  001
                    1                  000
                    2                  011
                    3                  101

   The three new states correspond to the three arrows in the above
   character state tree. Possession of one of the new states corresponds
   to whether or not the old state had that arrow in its ancestry. Thus
   the first new state corresponds to the bottommost arrow, which only
   state 3 has in its ancestry, the second state to the rightmost of the
   top arrows, and the third state to the leftmost top arrow. This coding
   will guarantee that the number of times that states arise on the tree
   (in programs MIX, MOVE, PENNY and BOOT) or the number of polymorphic
   states in a tree segment (in the Polymorphism option of DOLLOP,
   DOLMOVE, DOLPENNY and DOLBOOT) will correctly correspond to what would
   have been the case had our programs been able to take multistate
   characters into account. Although I have shown the above character
   state tree as rooted, the recoding method works equally well on
   unrooted multistate characters as long as the connections between the
   states are known and contain no loops.

   However, in the default option of programs DOLLOP, DOLMOVE, DOLPENNY
   and DOLBOOT the multistate recoding does not necessarily work
   properly, as it may lead the program to reconstruct nonexistent state
   combinations such as 010. An example of this problem is given in my
   paper on alternative phylogenetic methods (1979).

   If you have multistate character data where the states are connected
   in a branching "character state tree" you may want to do the binary
   recoding yourself. Thanks to Christopher Meacham, the package contains
   a program, FACTOR, which will do the recoding itself. For details see
   the documentation file for FACTOR.

   We now also have the program PARS, which can do parsimony for
   unordered character states.

  Input files for usage example

  File: dollop.dat

     5    6
Alpha     110110
Beta      110000
Gamma     100110
Delta     001001
Epsilon   001110

Output file format

   fdollop output is standard: a list of equally parsimonious trees, and,
   if the user selects menu option 4, a table of the numbers of
   reversions or retentions of polymorphism necessary in each character.
   If any of the ancestral states has been specified to be unknown, a
   table of reconstructed ancestral states is also provided. When
   reconstructing the placement of forward changes and reversions under
   the Dollo method, keep in mind that each polymorphic state in the
   input data will require one "last minute" reversion. This is included
   in the tabulated counts. Thus if we have both states 0 and 1 at a tip
   of the tree the program will assume that the lineage had state 1 up to
   the last minute, and then state 0 arose in that population by
   reversion, without loss of state 1.

   If the user selects menu option 5, a table is printed out after each
   tree, showing for each branch whether there are known to be changes in
   the branch, and what the states are inferred to have been at the top
   end of the branch. If the inferred state is a "?" there may be
   multiple equally-parsimonious assignments of states; the user must
   work these out for themselves by hand.

   If the A option is used, then the program will infer, for any
   character whose ancestral state is unknown ("?") whether the ancestral
   state 0 or 1 will give the best tree. If these are tied, then it may
   not be possible for the program to infer the state in the internal
   nodes, and these will all be printed as ".". If this has happened and
   you want to know more about the states at the internal nodes, you will
   find helpful to use DOLMOVE to display the tree and examine its
   interior states, as the algorithm in DOLMOVE shows all that can be
   known in this case about the interior states, including where there is
   and is not amibiguity. The algorithm in DOLLOP gives up more easily on
   displaying these states.

   If the U (User Tree) option is used and more than one tree is
   supplied, the program also performs a statistical test of each of
   these trees against the best tree. This test, which is a version of
   the test proposed by Alan Templeton (1983) and evaluated in a test
   case by me (1985a). It is closely parallel to a test using log
   likelihood differences invented by Kishino and Hasegawa (1989), and
   uses the mean and variance of step differences between trees, taken
   across characters. If the mean is more than 1.96 standard deviations
   different then the trees are declared significantly different. The
   program prints out a table of the steps for each tree, the differences
   of each from the highest one, the variance of that quantity as
   determined by the step differences at individual characters, and a
   conclusion as to whether that tree is or is not significantly worse
   than the best one. It is important to understand that the test assumes
   that all the binary characters are evolving independently, which is
   unlikely to be true for many suites of morphological characters.

   If there are more than two trees, the test done is an extension of the
   KHT test, due to Shimodaira and Hasegawa (1999). They pointed out that
   a correction for the number of trees was necessary, and they
   introduced a resampling method to make this correction. In the version
   used here the variances and covariances of the sums of steps across
   characters are computed for all pairs of trees. To test whether the
   difference between each tree and the best one is larger than could
   have been expected if they all had the same expected number of steps,
   numbers of steps for all trees are sampled with these covariances and
   equal means (Shimodaira and Hasegawa's "least favorable hypothesis"),
   and a P value is computed from the fraction of times the difference
   between the tree's value and the lowest number of steps exceeds that
   actually observed. Note that this sampling needs random numbers, and
   so the program will prompt the user for a random number seed if one
   has not already been supplied. With the two-tree KHT test no random
   numbers are used.

   In either the KHT or the SH test the program prints out a table of the
   number of steps for each tree, the differences of each from the lowest
   one, the variance of that quantity as determined by the differences of
   the numbers of steps at individual characters, and a conclusion as to
   whether that tree is or is not significantly worse than the best one.

   If option 6 is left in its default state the trees found will be
   written to a tree file, so that they are available to be used in other
   programs. If the program finds multiple trees tied for best, all of
   these are written out onto the output tree file. Each is followed by a
   numerical weight in square brackets (such as [0.25000]). This is
   needed when we use the trees to make a consensus tree of the results
   of bootstrapping or jackknifing, to avoid overrepresenting replicates
   that find many tied trees.

  Output files for usage example

  File: dollop.fdollop


Dollo and polymorphism parsimony algorithm, version 3.6b

Dollo parsimony method


One most parsimonious tree found:




  +-----------Delta
--3
  !  +--------Epsilon
  +--4
     !  +-----Gamma
     +--2
        !  +--Beta
        +--1
           +--Alpha


requires a total of      3.000

  File: dollop.treefile

   (Delta,(Epsilon,(Gamma,(Beta,Alpha))));

Data files

   None

Notes

   None.

References

   None.

Warnings

   None.

Diagnostic Error Messages

   None.

Exit status

   It always exits with status 0.

Known bugs

   None.

See also

   Program name Description
   eclique Largest clique program
   edollop Dollo and polymorphism parsimony algorithm
   edolpenny Penny algorithm Dollo or polymorphism
   efactor Multistate to binary recoding program
   emix Mixed parsimony algorithm
   epenny Penny algorithm, branch-and-bound to find all most parsimonious
   trees
   fclique Largest clique program
   fdolpenny Penny algorithm Dollo or polymorphism
   ffactor Multistate to binary recoding program
   fmix Mixed parsimony algorithm
   fmove Interactive mixed method parsimony
   fpars Discrete character parsimony
   fpenny Penny algorithm, branch-and-bound to find all most parsimonious
   trees

Author(s)

   This program is an EMBOSS conversion of a program written by Joe
   Felsenstein as part of his PHYLIP package.

   Although we take every care to ensure that the results of the EMBOSS
   version are identical to those from the original package, we recommend
   that you check your inputs give the same results in both versions
   before publication.

   Please report all bugs in the EMBOSS version to the EMBOSS bug team,
   not to the original author.

History

   Written (2004) - Joe Felsenstein, University of Washington.

   Converted (August 2004) to an EMBASSY program by the EMBOSS team.

Target users

   This program is intended to be used by everyone and everything, from
   naive users to embedded scripts.
