
                                   fmix 



Function

   Mixed parsimony algorithm

Description

   Estimates phylogenies by some parsimony methods for discrete character
   data with two states (0 and 1). Allows use of the Wagner parsimony
   method, the Camin-Sokal parsimony method, or arbitrary mixtures of
   these. Also reconstructs ancestral states and allows weighting of
   characters (does not infer branch lengths).

Algorithm

   MIX is a general parsimony program which carries out the Wagner and
   Camin-Sokal parsimony methods in mixture, where each character can
   have its method specified separately. The program defaults to carrying
   out Wagner parsimony.

   The Camin-Sokal parsimony method explains the data by assuming that
   changes 0 --> 1 are allowed but not changes 1 --> 0. Wagner parsimony
   allows both kinds of changes. (This under the assumption that 0 is the
   ancestral state, though the program allows reassignment of the
   ancestral state, in which case we must reverse the state numbers 0 and
   1 throughout this discussion). The criterion is to find the tree which
   requires the minimum number of changes. The Camin-Sokal method is due
   to Camin and Sokal (1965) and the Wagner method to Eck and Dayhoff
   (1966) and to Kluge and Farris (1969).

   Here are the assumptions of these two methods:
    1. Ancestral states are known (Camin-Sokal) or unknown (Wagner).
    2. Different characters evolve independently.
    3. Different lineages evolve independently.
    4. Changes 0 --> 1 are much more probable than changes 1 --> 0
       (Camin-Sokal) or equally probable (Wagner).
    5. Both of these kinds of changes are a priori improbable over the
       evolutionary time spans involved in the differentiation of the
       group in question.
    6. Other kinds of evolutionary event such as retention of
       polymorphism are far less probable than 0 --> 1 changes.
    7. Rates of evolution in different lineages are sufficiently low that
       two changes in a long segment of the tree are far less probable
       than one change in a short segment.

   That these are the assumptions of parsimony methods has been
   documented in a series of papers of mine: (1973a, 1978b, 1979, 1981b,
   1983b, 1988b). For an opposing view arguing that the parsimony methods
   make no substantive assumptions such as these, see the papers by
   Farris (1983) and Sober (1983a, 1983b), but also read the exchange
   between Felsenstein and Sober (1986).

Usage

   Here is a sample session with fmix


% fmix 
Mixed parsimony algorithm
Input file: mix.dat
Input tree file: 
Output file [mix.fmix]: 

Adding species:
   1. Alpha
   2. Beta
   3. Gamma
   4. Delta
   5. Epsilon

Doing global rearrangements
  !---------!
   .........


Output written to file "mix.fmix"

Trees also written onto file "mix.treefile"


   Go to the input files for this example
   Go to the output files for this example

   Example 2


% fmix -printdata -ancfile mixancfile.dat 
Mixed parsimony algorithm
Input file: mix.dat
Input tree file: 
Output file [mix.fmix]: 

Adding species:
   1. Alpha
   2. Beta
   3. Gamma
   4. Delta
   5. Epsilon

Doing global rearrangements
  !---------!
   .........


Output written to file "mix.fmix"

Trees also written onto file "mix.treefile"


   Go to the input files for this example
   Go to the output files for this example

Command line arguments

   Standard (Mandatory) qualifiers:
  [-infile]            discretestates File containing one or more data sets
  [-intreefile]        tree       (no help text) tree value
  [-outfile]           outfile    Output file name

   Additional (Optional) qualifiers (* if not always prompted):
   -weights            properties Weights file
   -ancfile            properties Ancestral states file
   -mixfile            properties Mixture file
   -method             menu       Choose the method to use
*  -njumble            integer    Number of times to randomise
*  -seed               integer    Random number seed between 1 and 32767 (must
                                  be odd)
   -outgrno            integer    Species number to use as outgroup
   -threshold          float      Threshold value
   -[no]trout          toggle     Write out trees to tree file
*  -outtreefile        outfile    Tree file name
   -printdata          boolean    Print data at start of run
   -[no]progress       boolean    Print indications of progress of run
   -[no]treeprint      boolean    Print out tree
   -ancseq             boolean    Print states at all nodes of tree
   -stepbox            boolean    Print out steps in each character

   Advanced (Unprompted) qualifiers: (none)
   Associated qualifiers:

   "-outfile" associated qualifiers
   -odirectory3        string     Output directory

   "-outtreefile" associated qualifiers
   -odirectory         string     Output directory

   General qualifiers:
   -auto               boolean    Turn off prompts
   -stdout             boolean    Write standard output
   -filter             boolean    Read standard input, write standard output
   -options            boolean    Prompt for standard and additional values
   -debug              boolean    Write debug output to program.dbg
   -verbose            boolean    Report some/full command line options
   -help               boolean    Report command line options. More
                                  information on associated and general
                                  qualifiers can be found with -help -verbose
   -warning            boolean    Report warnings
   -error              boolean    Report errors
   -fatal              boolean    Report fatal errors
   -die                boolean    Report deaths


   Standard (Mandatory) qualifiers Allowed values Default
   [-infile]
   (Parameter 1) File containing one or more data sets Discrete states
   file
   [-intreefile]
   (Parameter 2) (no help text) tree value Phylogenetic tree
   [-outfile]
   (Parameter 3) Output file name Output file <sequence>.fmix
   Additional (Optional) qualifiers Allowed values Default
   -weights Weights file Property value(s)
   -ancfile Ancestral states file Property value(s)
   -mixfile Mixture file Property value(s)
   -method Choose the method to use
   w (Wagner)
   c (Camin-Sokal)
   m (Mixed)
   Wagner
   -njumble Number of times to randomise Integer 0 or more 0
   -seed Random number seed between 1 and 32767 (must be odd) Integer
   from 1 to 32767 1
   -outgrno Species number to use as outgroup Integer 0 or more 0
   -threshold Threshold value Number 1.000 or more $(infile.discretesize)
   -[no]trout Write out trees to tree file Toggle value Yes/No Yes
   -outtreefile Tree file name Output file
   -printdata Print data at start of run Boolean value Yes/No No
   -[no]progress Print indications of progress of run Boolean value
   Yes/No Yes
   -[no]treeprint Print out tree Boolean value Yes/No Yes
   -ancseq Print states at all nodes of tree Boolean value Yes/No No
   -stepbox Print out steps in each character Boolean value Yes/No No
   Advanced (Unprompted) qualifiers Allowed values Default
   (none)

Input file format

   fmix reads discrete character data. States "?", "P", and "B" are
   allowed.

  (0,1) Discrete character data

   These programs are intended for the use of morphological systematists
   who are dealing with discrete characters, or by molecular
   evolutionists dealing with presence-absence data on restriction sites.
   One of the programs (PARS) allows multistate characters, with up to 8
   states, plus the unknown state symbol "?". For the others, the
   characters are assumed to be coded into a series of (0,1) two-state
   characters. For most of the programs there are two other states
   possible, "P", which stands for the state of Polymorphism for both
   states (0 and 1), and "?", which stands for the state of ignorance: it
   is the state "unknown", or "does not apply". The state "P" can also be
   denoted by "B", for "both".

   There is a method invented by Sokal and Sneath (1963) for linear
   sequences of character states, and fully developed for branching
   sequences of character states by Kluge and Farris (1969) for recoding
   a multistate character into a series of two-state (0,1) characters.
   Suppose we had a character with four states whose character-state tree
   had the rooted form:

               1 ---> 0 ---> 2
                      |
                      |
                      V
                      3

   so that 1 is the ancestral state and 0, 2 and 3 derived states. We can
   represent this as three two-state characters:

                Old State           New States
                --- -----           --- ------
                    0                  001
                    1                  000
                    2                  011
                    3                  101

   The three new states correspond to the three arrows in the above
   character state tree. Possession of one of the new states corresponds
   to whether or not the old state had that arrow in its ancestry. Thus
   the first new state corresponds to the bottommost arrow, which only
   state 3 has in its ancestry, the second state to the rightmost of the
   top arrows, and the third state to the leftmost top arrow. This coding
   will guarantee that the number of times that states arise on the tree
   (in programs MIX, MOVE, PENNY and BOOT) or the number of polymorphic
   states in a tree segment (in the Polymorphism option of DOLLOP,
   DOLMOVE, DOLPENNY and DOLBOOT) will correctly correspond to what would
   have been the case had our programs been able to take multistate
   characters into account. Although I have shown the above character
   state tree as rooted, the recoding method works equally well on
   unrooted multistate characters as long as the connections between the
   states are known and contain no loops.

   However, in the default option of programs DOLLOP, DOLMOVE, DOLPENNY
   and DOLBOOT the multistate recoding does not necessarily work
   properly, as it may lead the program to reconstruct nonexistent state
   combinations such as 010. An example of this problem is given in my
   paper on alternative phylogenetic methods (1979).

   If you have multistate character data where the states are connected
   in a branching "character state tree" you may want to do the binary
   recoding yourself. Thanks to Christopher Meacham, the package contains
   a program, FACTOR, which will do the recoding itself. For details see
   the documentation file for FACTOR.

   We now also have the program PARS, which can do parsimony for
   unordered character states.

  Input files for usage example

  File: mix.dat

     5    6
Alpha     110110
Beta      110000
Gamma     100110
Delta     001001
Epsilon   001110

  Input files for usage example 2

  File: mixancfile.dat

   001??1

Output file format

   fmix output is standard: a list of equally parsimonious trees, which
   will be printed as rooted or unrooted depending on which is
   appropriate, and, if the user chooses, a table of the number of
   changes of state required in each character. If the Wagner option is
   in force for a character, it may not be possible to unambiguously
   locate the places on the tree where the changes occur, as there may be
   multiple possibilities. If the user selects menu option 5, a table is
   printed out after each tree, showing for each branch whether there are
   known to be changes in the branch, and what the states are inferred to
   have been at the top end of the branch. If the inferred state is a "?"
   there will be multiple equally-parsimonious assignments of states; the
   user must work these out for themselves by hand.

   If the Camin-Sokal parsimony method is invoked and the Ancestors
   option is also used, then the program will infer, for any character
   whose ancestral state is unknown ("?") whether the ancestral state 0
   or 1 will give the fewest state changes. If these are tied, then it
   may not be possible for the program to infer the state in the internal
   nodes, and these will all be printed as ".". If this has happened and
   you want to know more about the states at the internal nodes, you will
   find helpful to use MOVE to display the tree and examine its interior
   states, as the algorithm in MOVE shows all that can be known in this
   case about the interior states, including where there is and is not
   amibiguity. The algorithm in MIX gives up more easily on displaying
   these states.

   If the A option is not used, then the program will assume 0 as the
   ancestral state for those characters following the Camin-Sokal method,
   and will assume that the ancestral state is unknown for those
   characters following Wagner parsimony. If any characters have unknown
   ancestral states, and if the resulting tree is rooted (even by
   outgroup), a table will also be printed out showing the best guesses
   of which are the ancestral states in each character. You will find it
   useful to understand the difference between the Camin-Sokal parsimony
   criterion with unknown ancestral state and the Wagner parsimony
   criterion.

   If the U (User Tree) option is used and more than one tree is
   supplied, the program also performs a statistical test of each of
   these trees against the best tree. This test, which is a version of
   the test proposed by Alan Templeton (1983) and evaluated in a test
   case by me (1985a). It is closely parallel to a test using log
   likelihood differences invented by Kishino and Hasegawa (1989), and
   uses the mean and variance of step differences between trees, taken
   across characters. If the mean is more than 1.96 standard deviations
   different then the trees are declared significantly different. The
   program prints out a table of the steps for each tree, the differences
   of each from the highest one, the variance of that quantity as
   determined by the step differences at individual characters, and a
   conclusion as to whether that tree is or is not significantly worse
   than the best one. It is important to understand that the test assumes
   that all the binary characters are evolving independently, which is
   unlikely to be true for many suites of morphological characters.

   If there are more than two trees, the test done is an extension of the
   KHT test, due to Shimodaira and Hasegawa (1999). They pointed out that
   a correction for the number of trees was necessary, and they
   introduced a resampling method to make this correction. In the version
   used here the variances and covariances of the sums of steps across
   characters are computed for all pairs of trees. To test whether the
   difference between each tree and the best one is larger than could
   have been expected if they all had the same expected number of steps,
   numbers of steps for all trees are sampled with these covariances and
   equal means (Shimodaira and Hasegawa's "least favorable hypothesis"),
   and a P value is computed from the fraction of times the difference
   between the tree's value and the lowest number of steps exceeds that
   actually observed. Note that this sampling needs random numbers, and
   so the program will prompt the user for a random number seed if one
   has not already been supplied. With the two-tree KHT test no random
   numbers are used.

   In either the KHT or the SH test the program prints out a table of the
   number of steps for each tree, the differences of each from the lowest
   one, the variance of that quantity as determined by the differences of
   the numbers of steps at individual characters, and a conclusion as to
   whether that tree is or is not significantly worse than the best one.

   If option 6 is left in its default state the trees found will be
   written to a tree file, so that they are available to be used in other
   programs. If the program finds multiple trees tied for best, all of
   these are written out onto the output tree file. Each is followed by a
   numerical weight in square brackets (such as [0.25000]). This is
   needed when we use the trees to make a consensus tree of the results
   of bootstrapping or jackknifing, to avoid overrepresenting replicates
   that find many tied trees.

  Output files for usage example

  File: mix.fmix


Mixed parsimony algorithm, version 3.6b

Wagner parsimony method




     4 trees in all found




           +--Epsilon
     +-----4
     !     +--Gamma
  +--2
  !  !     +--Delta
--1  +-----3
  !        +--Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!


requires a total of      9.000





     +--------Gamma
     !
  +--2     +--Epsilon
  !  !  +--4
  !  +--3  +--Delta
--1     !
  !     +-----Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!


requires a total of      9.000





     +--------Epsilon
  +--4
  !  !  +-----Gamma
  !  +--2
--1     !  +--Delta
  !     +--3
  !        +--Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!


requires a total of      9.000





     +--------Gamma
  +--2
  !  !  +-----Epsilon
  !  +--4
--1     !  +--Delta
  !     +--3
  !        +--Beta
  !
  +-----------Alpha

  remember: this is an unrooted tree!


requires a total of      9.000


  File: mix.treefile

(((Epsilon,Gamma),(Delta,Beta)),Alpha)[0.2500];
((Gamma,((Epsilon,Delta),Beta)),Alpha)[0.2500];
((Epsilon,(Gamma,(Delta,Beta))),Alpha)[0.2500];
((Gamma,(Epsilon,(Delta,Beta))),Alpha)[0.2500];

  Output files for usage example 2

  File: mix.fmix


Mixed parsimony algorithm, version 3.6b

5 species, 6 characters

Wagner parsimony method


Name         Characters
----         ----------

Alpha        11011 0
Beta         11000 0
Gamma        10011 0
Delta        00100 1
Epsilon      00111 0


    Ancestral states:
             001?? 1


One most parsimonious tree found:




  +-----------Delta
--3
  !  +--------Epsilon
  +--4
     !  +-----Gamma
     +--2
        !  +--Beta
        +--1
           +--Alpha


requires a total of      8.000

best guesses of ancestral states:
       0 1 2 3 4 5 6 7 8 9
     *--------------------
    0!   0 0 1 ? ? 1


  File: mix.treefile

   (Delta,(Epsilon,(Gamma,(Beta,Alpha))));

Data files

   None

Notes

   None.

References

   None.

Warnings

   None.

Diagnostic Error Messages

   None.

Exit status

   It always exits with status 0.

Known bugs

   None.

See also

   Program name                Description
   eclique      Largest clique program
   edollop      Dollo and polymorphism parsimony algorithm
   edolpenny    Penny algorithm Dollo or polymorphism
   efactor      Multistate to binary recoding program
   emix         Mixed parsimony algorithm
   epenny       Penny algorithm, branch-and-bound
   fclique      Largest clique program
   fdollop      Dollo and polymorphism parsimony algorithm
   fdolpenny    Penny algorithm Dollo or polymorphism
   ffactor      Multistate to binary recoding program
   fmove        Interactive mixed method parsimony
   fpars        Discrete character parsimony
   fpenny       Penny algorithm, branch-and-bound

Author(s)

   This program is an EMBOSS conversion of a program written by Joe
   Felsenstein as part of his PHYLIP package.

   Although we take every care to ensure that the results of the EMBOSS
   version are identical to those from the original package, we recommend
   that you check your inputs give the same results in both versions
   before publication.

   Please report all bugs in the EMBOSS version to the EMBOSS bug team,
   not to the original author.

History

   Written (2004) - Joe Felsenstein, University of Washington.

   Converted (August 2004) to an EMBASSY program by the EMBOSS team.

Target users

   This program is intended to be used by everyone and everything, from
   naive users to embedded scripts.
